{"version":3,"sources":["webpack:///src/app/vehicle/vehicle-routing.module.ts","webpack:///src/app/vehicle/vehicle.page.scss","webpack:///src/app/vehicle/vehicle.page.html","webpack:///src/app/vehicle/vehicle.module.ts","webpack:///src/app/vehicle/vehicle.page.ts"],"names":["routes","path","component","VehiclePageRoutingModule","imports","forChild","exports","VehiclePageModule","declarations","VehiclePage","fb","vehicleService","alertController","platform","regform","group","defaultType","Plate","required","Type","Model","MotorNumber","is","usePicker","getVehicle","getAllVehicle","subscribe","res","listOfVehicle","valid","vechileId","create","value","updateVehicle","reset","presentAlert","ErrorAlert","vehicle","slidingItem","editMode","id","get","setValue","close","presentAlertConfirm","header","message","buttons","text","role","cssClass","handler","blah","console","log","removeVehicle","alert","present","selector","template"],"mappings":"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","file":"vehicle-vehicle-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { VehiclePage } from './vehicle.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: VehiclePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class VehiclePageRoutingModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ2ZWhpY2xlLnBhZ2Uuc2NzcyJ9 */\";","export default \"<ion-header [translucent]=\\\"true\\\">\\n  <ion-toolbar color=\\\"primary\\\" >\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>Vehicle</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"regform\\\">\\n    <ion-item>\\n       <ion-label>Name of Plate </ion-label>\\n       <ion-input formControlName=\\\"Plate\\\" type=\\\"text\\\"></ion-input>\\n       <small class=\\\"form-text text-muted\\\" *ngIf=\\\"!regform.get('Plate').valid && regform.get('Plate').touched\\\" > This field is required! </small> \\n     </ion-item>\\n     <ion-item>\\n      <ion-label>Type</ion-label>\\n      <ion-select interface=\\\"popover\\\" formControlName=\\\"Type\\\" [(ngModel)]=\\\"defaultType\\\">\\n        <ion-select-option value=\\\"motorcycles\\\">motorcycles</ion-select-option>\\n        <ion-select-option value=\\\"cars\\\">cars</ion-select-option>\\n        <ion-select-option value=\\\" trucks\\\"> trucks</ion-select-option>\\n        <ion-select-option value=\\\"buses\\\">buses</ion-select-option>\\n      </ion-select> <small class=\\\"form-text text-muted\\\" *ngIf=\\\"!regform.get('Type').valid && regform.get('Type').touched\\\" > This field is required! </small> \\n    </ion-item>\\n     <ion-item>\\n       <ion-label>Model</ion-label>\\n       <ion-input formControlName=\\\"Model\\\" type=\\\"text\\\"></ion-input>\\n       <small class=\\\"form-text text-muted\\\" *ngIf=\\\"!regform.get('Model').valid && regform.get('Model').touched\\\" > This field is required! </small> \\n     </ion-item>\\n     <ion-item>\\n       <ion-label>MotorNumber</ion-label>\\n       <ion-input formControlName=\\\"MotorNumber\\\" type=\\\"text\\\"></ion-input>\\n       <small class=\\\"form-text text-muted\\\" *ngIf=\\\"!regform.get('MotorNumber').valid && regform.get('MotorNumber').touched\\\" > This field is required! </small> \\n     </ion-item>\\n     <div style=\\\"text-align: center; margin: auto;\\\">\\n       <ion-button id=\\\"add items\\\" (click)=\\\"saveVehicle()\\\"> \\n         <ion-icon slot=\\\"start\\\" name=\\\"add-circle-outline\\\"></ion-icon>\\n         {{editMode?'Update Vehicle':'Add Vehicle'}}</ion-button>\\n     </div> \\n </form>\\n <ion-item-sliding *ngFor=\\\"let item of listOfVehicle \\\" #slidingItem >\\n  <ion-item detail>\\n    <ion-label>{{item.Plate}}</ion-label>\\n    <ion-label>{{item.Type}}</ion-label>\\n    <ion-label>{{item.Model}}</ion-label>\\n    <ion-label>{{item.MotorNumber}} </ion-label>\\n  </ion-item>\\n  <ion-item-options side=\\\"start\\\">\\n    <ion-item-option color=\\\"danger\\\" (click)=\\\"edit(item,slidingItem)\\\">\\n   <ion-icon  name=\\\"create\\\" slot=\\\"icon-only\\\"></ion-icon></ion-item-option>\\n   <ion-item-option color=\\\"danger\\\" (click)=\\\"delete(item,slidingItem)\\\">\\n    <ion-icon  name=\\\"trash\\\" slot=\\\"icon-only\\\"></ion-icon></ion-item-option>\\n  </ion-item-options>\\n</ion-item-sliding>\\n\\n</ion-content>\\n\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { VehiclePageRoutingModule } from './vehicle-routing.module';\n\nimport { VehiclePage } from './vehicle.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    VehiclePageRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [VehiclePage]\n})\nexport class VehiclePageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AlertController, IonItemSliding, Platform } from '@ionic/angular';\nimport { Vehicle } from 'src/Table/table';\nimport { VehicleService } from '../Service/vehicle.service';\n\n@Component({\n  selector: 'app-vehicle',\n  templateUrl: './vehicle.page.html',\n  styleUrls: ['./vehicle.page.scss'],\n})\nexport class VehiclePage implements OnInit {\n  regform = this.fb.group({});\n  vechileId: string;\n  listOfVehicle: Vehicle[];\n  editMode: boolean;\n  base64textString: string;\n  defaultType=\"motorcycles\";\n  usePicker: boolean;\n  constructor(private fb: FormBuilder,\n    private vehicleService: VehicleService,\n    private alertController: AlertController,\n    private platform:Platform) { }\n\n  ngOnInit() {\n    this.regform = this.fb.group({\n      Plate: [\"\", Validators.required],\n      Type: [\"\", Validators.required],\n      Model: [\"\", Validators.required],\n      MotorNumber: [\"\", Validators.required],\n    });\n    if ((this.platform.is('mobile') && !this.platform.is('hybrid')) ||\n    this.platform.is('desktop')\n  ) {\n    this.usePicker = true;\n  }\n    this.getVehicle();\n  }\n  getVehicle() {\n    this.vehicleService.getAllVehicle().subscribe(res => {\n      this.listOfVehicle = res;\n    })\n  }\n  saveVehicle() {\n    if (this.regform.valid) {\n      if (!this.vechileId) {\n        this.vehicleService.create(this.regform.value);\n      }\n      else {\n        this.vehicleService.updateVehicle(this.regform.value, this.vechileId)\n      }\n      this.regform.reset();\n      this.presentAlert();\n      this.vechileId = null;\n    }\n    else {\n      this.ErrorAlert();\n    }\n  }\n  edit(vehicle: Vehicle, slidingItem: IonItemSliding) {\n    this.editMode = true;\n    this.vechileId = vehicle.id;\n    this.regform.get('Model').setValue(vehicle.Model);\n    this.regform.get('MotorNumber').setValue(vehicle.MotorNumber);\n    this.regform.get('Plate').setValue(vehicle.Plate);\n    this.regform.get('Type').setValue(vehicle.Type);\n    slidingItem.close();\n  }\n  delete(vehicle: Vehicle, slidingItem: IonItemSliding) {\n    this.presentAlertConfirm(vehicle);\n    slidingItem.close();\n  }\n  async presentAlertConfirm(vehicle: Vehicle) {\n    const alert = await this.alertController.create({\n      header: 'Confirm!',\n      message: '<strong>Are you sure you want delete?</strong>',\n      buttons: [\n        {\n          text: 'Cancel',\n          role: 'cancel',\n          cssClass: 'secondary',\n          handler: (blah) => {\n            console.log('Confirm Cancel: blah');\n          }\n        }, {\n          text: 'OK',\n          handler: () => {\n            this.vehicleService.removeVehicle(vehicle.id);\n            this.regform.reset();\n            this.vechileId = null;\n          }\n        }\n      ]\n    });\n    await alert.present();\n  }\n  async ErrorAlert() {\n    const alert = await this.alertController.create({\n      cssClass: 'my-custom-class',\n      header: 'Error',\n      // subHeader: 'Subtitle',\n      message: 'Please Enter All field.',\n      buttons: ['OK']\n    });\n\n    await alert.present();\n  }\n  async presentAlert() {\n    const alert = await this.alertController.create({\n      cssClass: 'my-custom-class',\n      header: 'vehicle ',\n      // subHeader: 'Subtitle',\n      message: 'vehicle Saved successfully.',\n      buttons: ['OK']\n    });\n\n    await alert.present();\n  }\n\n\n}\n"]}